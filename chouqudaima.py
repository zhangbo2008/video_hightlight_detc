houchuli=[-0.6172, -0.7764, -0.6089, -0.5146, -0.3081, -0.3896, -0.4675, -0.3899, -0.8159, -0.4707, -0.5254, -0.6367, -0.4619, -0.4282, -0.3562, -0.3979, -0.4534, -0.2954, -0.2335, -0.5352, -0.1271, -0.2443, -0.2756, -0.3118, -0.4009, -0.3992, -0.3149, -0.4526, -0.3608, -0.3733, -0.3179, -0.2161, -0.321, -0.325, -0.354, -0.2947, -0.262, -0.1455, -0.1493, 0.1793, -0.3733, -0.1847, 0.1024, -0.1919, -0.3145, -0.2344, -0.3171, -0.3777, -0.2115, -0.4287, -0.3538, -0.4866, -0.3396, -0.1716, -0.2308, -0.3215, -0.4182, -0.3125, -0.2322, -0.4753, -0.4026, -0.3005, -0.1624, -0.3621, -0.521, -0.5386, -0.1554, -0.3269, -0.3311, -0.3606, -0.5293, -0.4148, -0.3977, -0.3208, 0.085, -0.2585, -0.3352, -0.2365, -0.2234, -0.2937, -0.3059, -0.3821, -0.1777, -0.3015, -0.4001, -0.3452, -0.3547, -0.4316, -0.5176, -0.5908, -0.4797, -0.5791, -0.5215, -0.6147, -0.5947, -0.5137, -0.6396, -0.4453, -0.5981, -0.5532, -0.5835, -0.7051, -0.6172, -0.6123, -0.5298, -0.7134, -0.5811, -0.6211, -0.689, -0.5879, -0.6821, -0.5649, -0.5576, -0.707, -0.7319, -0.5762, -0.6411, -0.6177, -0.644, -0.6738, -0.6616, -0.5522, -0.6885, -0.5874, -0.6265, -0.6045, -0.54, -0.5806, -0.6401, -0.6709, -0.6035, -0.5093, -0.3469, -0.4314, -0.4568, -0.3782, -0.1359, -0.3506, -0.1381, -0.4729, -0.1118, -0.1707, -0.1285, 0.0363, -0.4829, -0.3223, -0.1125, -0.1003, -0.2883, -0.235, 0.0907, -0.2343, -0.2524, -0.2502, 0.0512, -0.1899, 0.0012, -0.3, -0.2876, -0.3564, -0.1791, 0.0117, -0.2625, -0.0064, -0.0458, -0.0328, 0.1483, -0.0306, 0.0254, -0.1078, -0.2629, -0.0162, -0.1243, -0.0733, -0.2449, -0.396, -0.1798, -0.272, -0.2078, -0.2573, -0.3826, -0.2422, -0.1271, -0.3127, -0.2942, -0.3142, -0.2678, -0.3657, -0.4143, -0.2688, -0.3958, -0.2302, -0.3542, -0.3931, -0.4536, 0.0887, -0.4053, -0.3337, -0.2969, -0.3076, -0.325, -0.342, -0.2783, -0.3215, -0.2751, -0.2037, -0.5391, -0.3289, -0.3042, -0.3818, -0.5635, -0.4172, -0.4841, -0.4348, -0.4626, -0.4954, -0.5273, -0.4006, -0.4509, -0.543, -0.603, -0.3733, -0.5171, -0.6128, -0.54]


print(1)
a=len(houchuli)


print(1)
import torch
a=torch.tensor(houchuli)
asdfasd=torch.argsort(a,descending=True)
print(asdfasd)




#========我们要抽取10秒.那就是5个.


#=====视频全部分10秒块然后sum即可.

minikuai=5
maxi=-9999
maxidex=0
for i in range(len(houchuli))[:-minikuai+1]:
    print(i,'当前位置')
    tmp=houchuli[i:i+minikuai]
    if sum(tmp)>maxi:
        maxi=sum(tmp)
        maxidex=i
print(maxi,maxidex)


#========maxidex 抽取10秒即可.#=当前抽取mp4会bug,因为底层不是python实现的原因, 所以保存为gif. 再用其他软件转gif为mp4或者avi即可.
if 1:
    import ffmpeg
    ffmpeg.input("somevideo/Bhxk-O1Y7Ho.mp4").trim(start=maxidex, duration=minikuai*2).output('output.gif').overwrite_output().run()






if 0:
    # import ffmpeg
    # in_filename = "somevideo/Bhxk-O1Y7Ho.mp4"
    # out_filename = "out.mp4"
    # prop = ffmpeg.probe(in_filename)
    # duration = float(prop["format"]["duration"])

    # stream = ffmpeg.input(in_filename)
    # v = stream.video.filter("trim", start=(maxidex),duration=10.0)
    # a = stream.audio.filter("atrim", start=(maxidex),duration=10.0)
    # out = ffmpeg.output(v, a, out_filename)
    # ffmpeg.run(out)

    import ffmpeg
    (ffmpeg
        .input('somevideo/Bhxk-O1Y7Ho.mp4')
        .trim(start=165, duration=minikuai*2) #=====这地方底层不是python代码, 所以start里面不能写变量!
        .filter('fps', fps=25, round='up')
        .output('out.mp4')
        .run())